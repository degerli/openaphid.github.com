<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | OpenAphid]]></title>
  <link href="http://openaphid.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://openaphid.github.com/"/>
  <updated>2012-05-16T16:20:46+08:00</updated>
  <id>http://openaphid.github.com/</id>
  <author>
    <name><![CDATA[Aphid Mobile]]></name>
    <email><![CDATA[openaphid@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial: Developer Mode of OpenAphid]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/02/develop-mode-of-openaphid/"/>
    <updated>2012-05-02T14:52:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/02/develop-mode-of-openaphid</id>
    <content type="html"><![CDATA[<p><code>Developer Mode</code> is a feature to speed up developing games with OpenAphid. The behavior of OpenAphid changes if the developer mode is turned on.</p>

<!-- more -->


<h2>How to Enable Developer Mode?</h2>

<p>Open your project with Xcode and locate the following lines in <code>OAAppDelegate.m</code>:</p>

<p>``` objective-c
[self.viewController.glViewController configBundleName:@"game.bundle"</p>

<pre><code>                                           baseURL:[NSURL URLWithString:@"http://129.158.217.36:18080"]
                                       developMode:YES];
</code></pre>

<p>```</p>

<ol>
<li><p>Setting the value of the <code>developMode</code> parameter to <code>YES</code> enables the developer mode of OpenAphid;</p></li>
<li><p>An HTTP server should be used to host the content inside the bundle folder specified by <code>configBundleName</code>. The value for the <code>baseURL</code> parameter should be set to the server address too. A ruby based tiny HTTP server is included in our boilerplate project, please refer to the <code>web_server.rb</code> and <code>start_dev_server.sh</code> files for more details;</p></li>
<li><p>The application should be built and re-deployed to devices with the new settings.</p></li>
</ol>


<p>And for the <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a> project, <code>UIApplicationExitsOnSuspend</code> is <code>YES</code> in its info.plist file; which makes the app terminate automatically when the Home button is pressed.</p>

<h2>Changes in Developer Mode</h2>

<p>The main benefit of using developer mode is that it makes the game development speedy like developing for web:</p>

<ul>
<li><p>JavaScript files are fetched from the HTTP server. If you want to see the result of your changes in the game script, you only need to re-open the app;</p></li>
<li><p>Graphics resources are fetched remotely too. For example, a texture can be created by using <code>new aphid.g2d.Texture2D("player.png")</code>; the <code>player.png</code> file is fetched via <code>http://129.158.217.36:18080/player.png</code> in developer mode. OpenAphid Runtime also prints a log about it as following:</p></li>
</ul>


<p><code>
INFO 05/02/12,13:41:32: (developer mode) loading data 'player.png' from remote: http://129.158.217.36:18080/player.png
</code></p>

<ul>
<li>Internal warning and error messages are displayed as on-screen notifications besides logging in device console. Warning messages are in blue background color and errors are in red color. The screenshot below shows a notification about a syntax error in a JavaScript file:</li>
</ul>


<p><img src="/images/developer-mode-error-notification.png" title="Notification" alt="Error Notification" /></p>

<ul>
<li><p>Messages produced by <code>console.warn</code> and <code>console.error</code> are also displayed as notifications;</p></li>
<li><p>Write access to read-only attributes of OpenAphid objects throws exception in developer mode.</p></li>
</ul>


<p>With the developer mode of OpenAphid, the typical development process is as follows:</p>

<ol>
<li><p>Developer edits the JavaScript file with game logics and updates graphic files inside the bundle folder;</p></li>
<li><p>Presses the home button and enters the app again to see the result of the changes;</p></li>
<li><p>Following the on-screen notifications and console logs to diagnose mistakes in JavaScript files.</p></li>
</ol>


<p>Hope you like the developer mode of OpenAphid. We'll improve it constantly to make game development easier. Please feel free to contact us if you have any suggestions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid v0.1 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/04/29/openaphid-v0-dot-1-released/"/>
    <updated>2012-04-29T20:11:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/04/29/openaphid-v0-dot-1-released</id>
    <content type="html"><![CDATA[<p>We're excited to release OpenAphid v0.1, which is the first public version of the project.</p>

<p>Three GitHub repositories have been created:</p>

<!-- more -->


<ul>
<li><p><code>Runtime</code>: <a href="https://github.com/openaphid/Runtime">https://github.com/openaphid/Runtime</a>. As the core runtime of OpenAphid, it's an iOS static library project and is mainly written in C++. Besides porting the OpenGL ES rendering from <a href="http://www.cocos2d-iphone.org/">Cocos2d-iPhone</a>, it also manages the binding layer which exposes the 2D rendering as <a href="/api-doc/latest/index.html">JavaScript APIs</a>.</p></li>
<li><p><code>Demos</code>: <a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a>. This repository includes several demos of OpenAphid. <code>PortedDemos</code> contains four iOS applications which are ported from <a href="http://www.cocos2d-iphone.org/">Cocos2d-iPhone</a>: NodeTest, SpriteTest, EffectTest and AdvEffectTest. They demonstrate how to manipulate nodes, sprites and actions in JavaScript APIs. <code>TankBenchmarks</code> is the benchmark described in our <a href="/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a>. The implementation by using <a href="https://developer.mobage.com/">ngCore</a> is also presented for your reference. You can build and run them on your iOS devices to reproduce the benchmark results.</p></li>
<li><p><code>Boilerplate-iOS</code>: <a href="https://github.com/openaphid/Boilerplate-iOS">https://github.com/openaphid/Boilerplate-iOS</a>. It's a template project for developing iOS games with OpenAphid. It's a good start point if you want to play with the APIs of OpenAphid by yourself.</p></li>
</ul>


<p>The <a href="/api-doc/latest/index.html">JavaScript API references</a> of OpenAphid v0.1 is also available. It's a bit rough right now. We promise that it'll be improved in the future.</p>

<h2>Highlights of OpenAphid v0.1</h2>

<p>v0.1 is the start of OpenAphid. We admit that it's not ready for real product yet, but we'd like to present some characteristics of the project here.</p>

<ul>
<li><p>OpenAphid APIs can be considered as the "DOM" APIs for 2D games on mobile devices. The internal binding layer is implemented in the similar approach as <a href="http://www.webkit.org/">WebKit</a> does for binding native objects to the JavaScript engine;</p></li>
<li><p>The memory occupied by native objects is managed automatically. Compared to some other script based game engines, OpenAphid doesn't provide destroy API at script level for any native objects. Native objects that are created in JavaScript are managed by the JavaScript garbage collector as other pure JavaScript objects.</p></li>
<li><p>OpenAphid follows the standard specifications to implement some core features. Although the rendering system of OpenAphid is ported from Cocos2d-iPhone, which is not supported in browsers; the other APIs in OpenAphid are designed to follow W3C standards. For example, the <code>console</code> object in global scope is provided as it is in browsers; the <code>XMLHttpRequest</code> APIs are partially implemented in v0.1, and will be fully compatible to its W3C specification in a future release. And the touch event handling in OpenAphid is implemented as the same as in DOM, which is totally different from Cocos2d-iPhone.</p></li>
<li><p>OpenAphid is fast and efficient. The benchmark result in the <a href="/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a> has been updated by using v0.1, which is slightly faster. We also evaluated the memory usage of OpenAphid with the same benchmark (lower is better):</p></li>
</ul>


<p><img src="/images/tank_benchmark_mem_v0.1.jpg" title="Real memory" alt="Real memory usage of OpenAphid and ngcore" /></p>

<blockquote><p>The data are captured by using the Activity Monitor of Xcode Instruments. The memory usage of the benchmark on ngcore v1.6 is presented for reference only.</p></blockquote>

<h2>What's Next for OpenAphid</h2>

<p>We're working hard to improve OpenAphid. Most efforts are spent on the following tasks:</p>

<ul>
<li><p>Ports more features from Cocos2d-iPhone, like physics support, audio support, etc;</p></li>
<li><p>Supports Android OS;</p></li>
<li><p>Provides binding APIs for integrating 3rd-party services. The binding system in OpenAphid Runtime is designed for the performance requirement of OpenGL ES rendering, but it's not suitable for general purpose. Another binding system is planned to bridge JavaScript codes and Objective-C(or Java on Android in the future releases) easily. The <code>Boilerplate-iOS</code> project will also be improved by integrating 3rd-party services, like analytics, in-app purchase, advertisement;</p></li>
<li><p>Implements more W3C standard APIs, includes making XMLHttpRequest fully compatible to specifications, adding FileSystem and WebSocket supports, etc.</p></li>
</ul>


<p>Please feel free to contact us with your questions and suggestions via <code>openaphid At gmail.com</code>. Weâ€™d appreciate it for your kind help.</p>

<h2>Special Thanks</h2>

<p>We'd like to express our appreciation to <a href="http://wannadobre.carbonmade.com/">Oana Dobre</a>, who designed the cute aphid graphics and allowed us to use them for free.</p>
]]></content>
  </entry>
  
</feed>
