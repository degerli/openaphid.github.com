<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenAphid-Engine | OpenAphid-Engine]]></title>
  <link href="http://openaphid.github.com/blog/categories/openaphid-engine/atom.xml" rel="self"/>
  <link href="http://openaphid.github.com/"/>
  <updated>2013-01-16T15:41:22+08:00</updated>
  <id>http://openaphid.github.com/</id>
  <author>
    <name><![CDATA[Aphid Mobile]]></name>
    <email><![CDATA[openaphid@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine v0.2.1f Release and Discontinuation Announcement]]></title>
    <link href="http://openaphid.github.com/blog/2013/01/14/openaphid-engine-v0-dot-2-1f-and-discontinuation-announcement/"/>
    <updated>2013-01-14T14:09:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2013/01/14/openaphid-engine-v0-dot-2-1f-and-discontinuation-announcement</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> was born as an exploration project at 2012 first half-year when I quit my day job. Its mission was to figure out the most efficient way to integrate a full JavaScript engine within native iOS/Android games.</p>

<!-- more -->


<p>The development went perfectly well as it even outperformed the commercial solution of <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> from DeNA. I really enjoyed the pleasure brought by tackling technical problems to make the engine support both iOS and Android with high performance. I also gained precious experiences after studying source codes of JavaScriptCore and other great open source projects.</p>

<p>But I failed to find enough time working on it after I started a long travel plan with my family at Aug 2012. After careful consideration, I have decided it's time to sunset the project as I'm going to find a long-term job again. For developers who are also interested at using a JavaScript engine within native apps, I'll write two or three more articles in these days to share some pieces of knowledge collected during the development of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p>

<p>v0.2.1f is the final update of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. The release comes with bug fixes for iOS6 support and performance improvements on Android. The <a href="https://github.com/openaphid/Demos/tree/master/iOS">iOS demo project</a> has been revamped by merging separated demos into one single app. It also illustrates the ability to use <a href="http://coffeescript.org/" title="CoffeeScript">CoffeeScript</a> and <a href="http://www.typescriptlang.org/" title="TypeScript">TypeScript</a> to write games with <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p>

<h2>Release notes of OpenAphid-Engine v0.2.1f</h2>

<ul>
<li><p>(Android) Adds <code>libOpenAphid_JIT.so</code> which includes a JIT enabled JavaScriptCore. It can significantly boost performance for computation intense tasks in JavaScript. For instance, the running time of <code>fibonacci(30)</code> drops to ~140ms from ~780ms on a Nexus 7, while Java on Dalvik VM takes 280msï½ž350ms to finish the calculation.
<code>javascript
function fibonacci(n) { return n &lt; 2 ? n : (fib(n-1) + fib(n-2)); }
</code></p></li>
<li><p>(Android) Improves rendering performance when a texture has premultiplied alpha values.</p></li>
<li><p>(Android) Fixes a crash when loading JNI libs on Android 4.0+ devices by using toolchains from Android NDK r8c.</p></li>
<li><p>(Android) Demo app has been refined. <a href="https://github.com/openaphid/Demos/tree/master/Android/Demos/apk">APK files</a>.</p></li>
<li><p>(iOS) Orientation on iOS6 now works correctly.</p></li>
<li><p>(iOS) Fixes compilation errors under llvm_4.1.</p></li>
<li><p>(iOS) New all-in-one demo app with ARC enabled. <a href="https://github.com/openaphid/Demos/tree/master/iOS">Project files</a>.</p></li>
<li><p>Samples of using CoffeeScript and TypeScript with <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. Please refer to <a href="https://github.com/openaphid/Demos/blob/master/iOS/OpenAphid-Demos/demo.bundle/coffee_tank.coffee">coffee_tank.coffee</a> and <a href="https://github.com/openaphid/Demos/blob/master/iOS/OpenAphid-Demos/demo.bundle/type_tank.ts">type_tank.ts</a> for more details.</p></li>
</ul>


<p><img src="/images/openaphid-0.2.1f-demos.png" title="Screenshot of New iOS&amp;Android Demo App" alt="screenshot" /></p>

<h2>About Github Repositories</h2>

<p>The main source codes of <a href="https://github.com/openaphid/Runtime">OpenAphid Runtime</a> and <a href="https://github.com/openaphid/AJ">AJ</a> (the modified JavaScript Engine) have been moved into folders named <code>DISCONTINUED</code>.</p>

<h2>Acknowledgments</h2>

<p>I appreciate everyone's support to <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. And special thanks to <a href="http://wannadobre.carbonmade.com/">Wanna Dobre</a>, who kindly designed the wonderful <a href="http://wannad.deviantart.com/gallery/#/d4zzsk5">aphid character</a> for the project and for this blog site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Exposing Java Methods to JavaScript in OpenAphid-Engine]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/10/tutorial-exposing-java-methods-to-javascript-in-openaphid/"/>
    <updated>2012-07-10T14:39:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/10/tutorial-exposing-java-methods-to-javascript-in-openaphid</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid">OpenAphid-Engine</a> for Android v0.1.5 supports exposing Java methods as JavaScript functions, which is helpful for integrating 3rd-party services into games. The binding APIs are similar to its <a href="/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid/">iOS version</a>.</p>

<!-- more -->


<h2>How to Expose Java Methods to JavaScript</h2>

<p>Any public Java methods with supported return type and parameter types, can be exposed as JavaScript functions via <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/Android/src/org/openaphid/bind/AphidJSFunction.java">@AphidJSFunction</a> annotation. An instance with exposed methods can be injected into JavaScript engine as a plain JavaScript object by using <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/Android/src/org/openaphid/gl/AphidRenderer.java">AphidRenderer.setScriptBinding(String name, Object bindingObject, boolean androidOnly)</a>. The injected object will be placed inside <code>aphid.ext</code> or <code>aphid.extandroid</code> namespaces, which is managed by the <code>androidOnly</code> parameter.</p>

<h3>Example of @AphidJSFunction</h3>

<p>```java
public class BindingTest4 {</p>

<pre><code>@AphidJSFunction(name="add", isInUIThread=true)
public int addInMainThread(int i1, int i2) {
    UI.assertInMainThread();
    return i1 + i2;
}
</code></pre>

<p>}</p>

<p>//in onCreate() method of AphidActivity
glSurfaceView.getAphidRenderer().setScriptBinding("test4", new BindingTest4(), false);
```</p>

<p>The snippet above injects an instance of Java class <code>BindingTest4</code> to JavaScript as <code>aphid.ext.test4</code>. Its method <code>addInMainThread()</code> can be accessed via <code>aphid.ext.test4.add()</code> in JavaScript.</p>

<p>The <code>AphidJSFunction</code> annotation supports two optional element-value pairs: <code>name</code> and <code>isInUIThread</code>. <code>name</code> declares a custom function name to JavaScript, the Java method name is used if it's not specified; <code>isInUIThread</code> controls the thread to invoke the Java method, its default value is <code>false</code>. In OpenAphid-Engine for Android, JavaScript runs inside the GL thread. Setting <code>isInUIThread</code> to <code>true</code> makes the Java method run inside the UI thread; the execution of JavaScript is blocked in the GL thread until the Java method returns from the UI thread.</p>

<h3>Type Conversion of Return Value from Java to JavaScript</h3>

<table class="aphid-table">
    <tr>
        <th>Java</th>
        <th>JavaScript</th>
    </tr>
    <tr>
        <td>void</td> <td>undefined</td>
    </tr>
    <tr>
        <td>null</td> <td>null</td>
    </tr>
    <tr>
        <td>boolean</td> <td>bool</td>
    </tr>
    <tr>
        <td>primitive numeric types<br/>(short, char, int, long, float, double)</td> <td>number</td>
    </tr>
    <tr>
        <td>String</td> <td>string</td>
    </tr>
    <tr>
        <td>List</td> <td>array</td>
    </tr>
    <tr>
        <td>Map</td> <td>object</td>
    </tr>
</table>


<h3>Type Conversion of Parameter Value from JavaScript to Java</h3>

<table class="aphid-table">
    <tr>
        <th>JavaScript</th> <th>Java</th>
    </tr>
    <tr>
        <td>undefined</td> <td>null</td>
    </tr>
    <tr>
        <td>null</td> <td>null</td>
    </tr>
    <tr>
        <td>number</td> <td>corresponding primitive numeric type</td>
    </tr>
    <tr>
        <td>string</td> <td>String</td>
    </tr>
    <tr>
        <td>array</td> <td>List</td>
    </tr>
    <tr>
        <td>object except array</td> <td>Map</td>
    </tr>
</table>


<p>Strict type checking is performed during conversion, which throws a JavaScript exception if the types are mismatched.</p>

<h2>Integration with Google Analytics in Boilerplate-Android</h2>

<p>Let's illustrate how to integrate Google Analytics SDK into OpenAphid-Engine for Android. All source codes can be found in the <a href="https://github.com/openaphid/Boilerplate-Android">Boilerplate-Android</a> project.</p>

<p>After adding Google Analytics Android SDK into our project as described in its <a href="https://developers.google.com/analytics/devguides/collection/android/devguide#gettingStarted">official document</a>, we create a Java class <a href="https://github.com/openaphid/Boilerplate-Android/blob/master/src/org/openaphid/thirdparty/ga/GoogleAnalyticsBinding.java">GoogleAnalyticsBinding</a> to bridge JavaScript and Google Analytics SDK. <code>GoogleAnalyticsBinding</code> makes the exposed functions have identical signatures as its iOS version, which enables the same script file(<a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/game.bundle/main.js">main.js</a>) to run on both platforms.</p>

<p>```java
public class GoogleAnalyticsBinding {</p>

<pre><code>//...

@AphidJSFunction(isInUIThread = true, name = "setCustomVariableForScope")
public void setCustomVariable(int index, String name, String value, int scope) {
    GoogleAnalyticsTracker.getInstance()
            .setCustomVar(index, name, value, scope);
}

//...
</code></pre>

<p>}
```</p>

<p>Then we can inject an instance into JavaScript namespace <code>aphid.ext</code> as what we do in iOS version:</p>

<p>```java
glSurfaceView.getAphidRenderer().setScriptBinding(</p>

<pre><code>"gat", 
new GoogleAnalyticsBinding(), 
false   //place inside aphid.ext namespace
);
</code></pre>

<p>```</p>

<p>Now all Google Analytics APIs can be accessed by the same JavaScript functions inside <code>aphid.ext.gat</code> on both iOS and Android.</p>

<p>That's all for this tutorial. We're working on OpenAphid-Engine for Android v0.2, which implements <code>XMLHttpRequest</code> APIs as what we already have in iOS version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine Android v0.1.5 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/09/openaphid-android-v0-dot-1-5-released/"/>
    <updated>2012-07-09T15:02:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/09/openaphid-android-v0-dot-1-5-released</id>
    <content type="html"><![CDATA[<p>We're pleased to release v0.1.5 of OpenAphid-Engine Android.</p>

<p>Highlights of this release includes:</p>

<ul>
<li><p>Support multitouch on Android</p></li>
<li><p>Enhanced single touch handling when multiple fingers are on screen</p></li>
<li><p>Public APIs for Java to JavaScript method binding</p></li>
</ul>


<p><a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a> is also updated with two new demos: <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/assets/demo.bundle/touch_test.js">touch_test.js</a> and <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/assets/demo.bundle/binding_test.js">binding_test.js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine Android v0.1 released]]></title>
    <link href="http://openaphid.github.com/blog/2012/06/27/openaphid-android-v0-dot-1-released/"/>
    <updated>2012-06-27T08:22:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/06/27/openaphid-android-v0-dot-1-released</id>
    <content type="html"><![CDATA[<p>We're excited to release the first version of OpenAphid-Engine which supports Android OS. OpenAphid-Engine is now a cross platform 2D game engine with both iOS and Android support.</p>

<p>Several github repositories have been updated, please check them out for more details:</p>

<!-- more -->


<ul>
<li><p><a href="https://github.com/openaphid/Runtime">https://github.com/openaphid/Runtime</a> is updated with the Android related codes. You can check it out and build it with Android NDK.</p></li>
<li><p><a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a> is also refreshed with the Android project files. You can download the prebuilt APK files to test them on your Android devices: <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/apk/OpenAphid-Android-Demos.apk">OpenAphid-Android-Demos.apk</a></p></li>
</ul>


<h2>Highlights and Limitations of OpenAphid-Engine Android v0.1</h2>

<p>It's the beginning of cross platform support of OpenAphid-Engine. Please consider it as an alpha release. But we'd like to summarize some implementation highlights here:</p>

<ul>
<li><p>The core runtime shares the same code base with the iOS version, which makes new features can be added to both platforms in the future.</p></li>
<li><p>The same JavaScript engine is used on both platforms, which saves us from building a proxy layer to support different engines on different platforms as other solutions do. It also brings better performance which we'll prove later.</p></li>
<li><p>The project is built with the standard Android NDK, no private or undocumented APIs are used.</p></li>
</ul>


<p>This release is lack of several important features comparing to the iOS version. We're planning another release to make it catch up in the near future.</p>

<ul>
<li><p>The native library is built for <code>armeabi-v7a</code> only in this release. <code>armeabi</code> support will be included in the next release.</p></li>
<li><p><code>JavaScript JIT compiler</code> is not enabled. We've done some experiments to enable it on Android OS, which shows promising performance gains for computation intensive tasks and regular expressions. But we decided to disable it now as we didn't spend enough time on evaluating its stability.</p></li>
<li><p><code>JavaScript to Dalvik Java binding</code> is not implemented. <code>XMLHttpRequest</code> and <code>multitouch</code> supports are absent too.</p></li>
<li><p>This version doesn't reload textures automatically when the GL context is destroyed. It simply finishes the activity if GL context is lost. We're working on a better way to handle it.</p></li>
</ul>


<h2>Performance Benchmark</h2>

<p>The same tank program as introduced in our <a href="/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a> is used to evaluate the performance of OpenAphid-Engine on Android OS. Several other Android 2D game engines are chose as references:</p>

<ul>
<li><p><a href="http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download">cocos2d-x 1.0.1-0.13.0</a>, a C++ port of <code>cocos2d-iphone</code> which supports Android OS.</p></li>
<li><p><a href="http://code.google.com/p/cocos2d-android-1/">cocos2d-android-1</a>, another port of <code>cocos2d-iphone</code> which is implemented in pure Java.</p></li>
<li><p><a href="https://developer.mobage.com/">Ngcore 1.8</a>, a commercial game engine from DeNA which also uses JavaScript and OpenGL ES.</p></li>
</ul>


<p>The benchmark is performed on a <a href="http://developer.motorola.com/products/defyplus-mb526/">Motorola DEFY+ MB526</a> phone, which has a 1GHz processor and a 854x480 sized screen. Its Android OS version is 2.3.6.</p>

<p>We captured the average FPS in 5 seconds for displaying different number of tanks with each engine:</p>

<p><img src="/images/tank_banckmark_android_v0.1.jpg" title="Benchmark Results" alt="performance benchmark" /></p>

<p>OpenAphid-Engine shows great performance again as we can tell from this chart. It's on par with <code>cocos2d-x</code>, and faster than others.</p>

<p><code>cocos2d-android-1</code> suffers from the frequently GC pauses of Dalvik VM as observed from logcat. <code>Ngcore</code> is the slowest engine once again, and its rendering is also buggy in this test. The dirty area in black color should have been cleared in the screenshot below, we've filed a bug report about it to Ngcore:</p>

<p><img src="/images/ngcore_rendering_bug.jpg" title="Demonstrating the rendering bug of Ngcore" alt="Ngcore Rendering Bug" /></p>

<h2>About the Next Release</h2>

<p>The next release will make the Android version have all features as the iOS version does. JavaScript to Dalvik Java binding APIs will be introduced to make integrating 3rd-party services become cross platform too. We'll add new features simultaneously on both iOS and Android versions after that release.</p>

<p>Stay Tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Calling Objective-C Methods from JavaScript in OpenAphid-Engine]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid/"/>
    <updated>2012-05-16T10:06:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid">OpenAphid-Engine</a> 0.2 was shipped with a new binding system which can bridge JavaScript functions to Objective-C methods on demand. It's useful for games to integrate analytics services, monetization solutions, and social services, etc. In this tutorial, we'll go through the binding system by demonstrating how to integrate <a href="https://developers.google.com/analytics/devguides/collection/ios/">Google Analytics iOS SDK</a> into OpenAphid-Engine.</p>

<!-- more -->


<h2>How to Access Objective-C Methods in JavaScript</h2>

<p>The <code>OABindingProtocol</code> protocol, defined in <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/OABindingProtocol.h">OABindingProtocol.h</a>, defines a method <code>bindSelectors:</code> that you can implement in your Objective-C classes to expose their methods to the JavaScript environment. To make a method valid for export, its return type and all argument types must be the supported types below:</p>

<h3>Type Conversion of Return Value from Objective-C to JavaScript</h3>

<table class="aphid-table">
    <tr>
        <th>Objective-C</th>
        <th>JavaScript</th>
    </tr>
    <tr>
        <td>void</td> <td>undefined</td>
    </tr>
    <tr>
        <td>nil or NSNull</td> <td>null</td>
    </tr>
    <tr>
        <td>primitive numeric types<br/>(int, float, double, etc)</td> <td>number</td>
    </tr>
    <tr>
        <td>NSNumber</td> <td>number</td>
    </tr>
    <tr>
        <td>NSString</td> <td>string</td>
    </tr>
    <tr>
        <td>NSArray</td> <td>array</td>
    </tr>
    <tr>
        <td>NSDictionary</td> <td>object</td>
    </tr>
</table>


<h3>Type Conversion of Argument Value from JavaScript to Objective-C</h3>

<table class="aphid-table">
    <tr>
        <th>JavaScript</th> <th>Objective-C</th>
    </tr>
    <tr>
        <td>undefined</td> <td>nil or NSNull</td>
    </tr>
    <tr>
        <td>null</td> <td>nil or NSNull</td>
    </tr>
    <tr>
        <td>number</td> <td>primitive number or NSNumber</td>
    </tr>
    <tr>
        <td>string</td> <td>NSString</td>
    </tr>
    <tr>
        <td>array</td> <td>NSArray</td>
    </tr>
    <tr>
        <td>object except array</td> <td>NSDictionary</td>
    </tr>
</table>


<p>For any method to export, it must be explicitly declared in the implementation of <code>bindSelectors:</code> in your Objective-C class. For example, the snippet below exports <code>[DatastoreBinding saveString:]</code> to JavaScript environment as <code>int saveString(string)</code>:</p>

<p>```objective-c</p>

<h1>import "OABindingProtocol"</h1>

<p>@interface DatastoreBinding : NSObject <OABindingProtocol>
@end</p>

<p>@implementation DatastoreBinding
- (BOOL) saveString:(NSString*)content
{
  [_myDatastore save:content];
}</p>

<h1>pragma OABindingProtocol</h1>

<ul>
<li>(void) bindSelectors:(OABindingMap*)bindingMap
{
  [bindingMap bindSelector:@selector(saveString:) forName:@"saveString"];
}
@end
```</li>
</ul>


<p>The binding object need be injected into JavaScript via <code>setScriptBinding:name:iOSOnly:</code> method of <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/OAGLViewController.h">OAGLViewController</a>:</p>

<p>```objective-c
- (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>//...
[self.viewController.glViewController setScriptBinding:[[[DatastoreBinding alloc] init] autorelease] 
                                                name:@"datastore" 
                                             iOSOnly:YES
</code></pre>

<p>   ];</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<p>OpenAphid-Engine injects an instance of <code>DatastoreBinding</code> as a JavaScript object of <code>[object DynamicBinding]</code> into JavaScript environment. And its name is <code>datastore</code>. The <code>iOSOnly</code> argument manages the namespace which contains the injected object. If it's <code>YES</code>, then the injected object can be accessed via <code>aphid.extios.datastore</code>; otherwise it can be accessed via <code>aphid.ext.datastore</code>.</p>

<blockquote><p>Notes: the <code>iOSOnly</code> argument is actually designed for future compliance when OpenAphid-Engine supports both iOS and Android.</p></blockquote>

<h2>Integration with Google Analytics in Boilerplate-iOS</h2>

<p>Let's see a more concrete example about integrating Google Analytics in <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a>.</p>

<p>After adding Google Analytics iOS SDK into the Xcode project by following its <a href="https://developers.google.com/analytics/devguides/collection/ios/devguide#gettingStarted">official instructions</a>. We create an Objective-C object to describe the binding in <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAGoogleAnalyticsBinding.h">OAGoogleAnalyticsBinding.h</a>:</p>

<p><code>objective-c
@interface OAGoogleAnalyticsBinding : NSObject &lt;OABindingProtocol&gt;
@end
</code></p>

<p>Then we add implementations of several methods in <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAGoogleAnalyticsBinding.m">OAGoogleAnalyticsBinding.m</a> that we want to invoke in JavaScript:</p>

<p>```objective-c
@implementation OAGoogleAnalyticsBinding
//...</p>

<ul>
<li><p>(void) startTrackerWithAccountID:(NSString*)accountID despatchPeriod:(int)period
{
  [[GANTracker sharedTracker] startTrackerWithAccountID:accountID dispatchPeriod:period delegate:nil];
}</p></li>
<li><p>(BOOL)trackPageview:(NSString *)pageURL
{
  return [[GANTracker sharedTracker] trackPageview:pageURL withError:NULL];
}</p></li>
</ul>


<p>//...
```</p>

<p>The binding of the methods should be declared in the <code>bindSelectors:</code> method:</p>

<p>```objective-c
- (void)bindSelectors:(OABindingMap *)bindingMap
{
[bindingMap bindSelector:@selector(startTrackerWithAccountID:despatchPeriod:)</p>

<pre><code>             forName:@"startTracker"];
</code></pre>

<p>//...</p>

<p>[bindingMap bindSelector:@selector(trackPageview:)</p>

<pre><code>             forName:@"trackPageView"];
</code></pre>

<p>//...
}
```</p>

<p>Then we can inject it into JavaScript as following code inside <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAAppDelegate.m">OAAppDelegate.m</a>:</p>

<p>```objective-c
- (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>//...

[self.viewController.glViewController setScriptBinding:[[OAGoogleAnalyticsBinding new] autorelease]  
                                                name:@"gat" 
                                             iOSOnly:NO];
//...
</code></pre>

<p>}</p>

<p>```</p>

<blockquote><p><strong> Updates at 07-09-2012: </strong> <code>iOSOnly</code> has been changed from <code>YES</code> to <code>NO</code> to match its Android version.</p></blockquote>

<p>Now we can use Google Analytics in JavaScript to track the user's behavior in games:</p>

<p><code>javascript
var gat = aphid.ext.gat; //Google Analytics is injected as aphid.ext.gat
gat.startTracker("UA-31741840-1", 10); //start a tracker
gat.trackPageView("main.js"); //track a page view
</code></p>

<blockquote><p><strong> Updates at 07-09-2012: </strong> Since <code>iOSOnly</code> has been set to <code>NO</code>, the JavaScript namespace for <code>gat</code> is switched to <code>aphid.ext</code> from <code>aphid.extios</code></p></blockquote>

<p>We're going to integrate more services into <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a>, and make it be a better starter kit for game development with OpenAphid-Engine.</p>

<p>If you have better ideas, please feel free to contact us via <code>openaphid@gmail.com</code> or raise an issue in our <a href="https://github.com/openaphid">github repositories</a>.</p>
]]></content>
  </entry>
  
</feed>
