<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | OpenAphid]]></title>
  <link href="http://openaphid.github.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://openaphid.github.com/"/>
  <updated>2012-12-12T20:17:54+08:00</updated>
  <id>http://openaphid.github.com/</id>
  <author>
    <name><![CDATA[Aphid Mobile]]></name>
    <email><![CDATA[openaphid@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial: Exposing Java Methods to JavaScript in OpenAphid]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/10/tutorial-exposing-java-methods-to-javascript-in-openaphid/"/>
    <updated>2012-07-10T14:39:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/10/tutorial-exposing-java-methods-to-javascript-in-openaphid</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid">OpenAphid</a> for Android v0.1.5 supports exposing Java methods as JavaScript functions, which is helpful for integrating 3rd-party services into games. The binding APIs are similar to its <a href="/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid/">iOS version</a>.</p>

<!-- more -->


<h2>How to Expose Java Methods to JavaScript</h2>

<p>Any public Java methods with supported return type and parameter types, can be exposed as JavaScript functions via <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/Android/src/org/openaphid/bind/AphidJSFunction.java">@AphidJSFunction</a> annotation. An instance with exposed methods can be injected into JavaScript engine as a plain JavaScript object by using <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/Android/src/org/openaphid/gl/AphidRenderer.java">AphidRenderer.setScriptBinding(String name, Object bindingObject, boolean androidOnly)</a>. The injected object will be placed inside <code>aphid.ext</code> or <code>aphid.extandroid</code> namespaces, which is managed by the <code>androidOnly</code> parameter.</p>

<h3>Example of @AphidJSFunction</h3>

<p>```java
public class BindingTest4 {</p>

<pre><code>@AphidJSFunction(name="add", isInUIThread=true)
public int addInMainThread(int i1, int i2) {
    UI.assertInMainThread();
    return i1 + i2;
}
</code></pre>

<p>}</p>

<p>//in onCreate() method of AphidActivity
glSurfaceView.getAphidRenderer().setScriptBinding("test4", new BindingTest4(), false);
```</p>

<p>The snippet above injects an instance of Java class <code>BindingTest4</code> to JavaScript as <code>aphid.ext.test4</code>. Its method <code>addInMainThread()</code> can be accessed via <code>aphid.ext.test4.add()</code> in JavaScript.</p>

<p>The <code>AphidJSFunction</code> annotation supports two optional element-value pairs: <code>name</code> and <code>isInUIThread</code>. <code>name</code> declares a custom function name to JavaScript, the Java method name is used if it's not specified; <code>isInUIThread</code> controls the thread to invoke the Java method, its default value is <code>false</code>. In OpenAphid for Android, JavaScript runs inside the GL thread. Setting <code>isInUIThread</code> to <code>true</code> makes the Java method run inside the UI thread; the execution of JavaScript is blocked in the GL thread until the Java method returns from the UI thread.</p>

<h3>Type Conversion of Return Value from Java to JavaScript</h3>

<table class="aphid-table">
    <tr>
        <th>Java</th>
        <th>JavaScript</th>
    </tr>
    <tr>
        <td>void</td> <td>undefined</td>
    </tr>
    <tr>
        <td>null</td> <td>null</td>
    </tr>
    <tr>
        <td>boolean</td> <td>bool</td>
    </tr>
    <tr>
        <td>primitive numeric types<br/>(short, char, int, long, float, double)</td> <td>number</td>
    </tr>
    <tr>
        <td>String</td> <td>string</td>
    </tr>
    <tr>
        <td>List</td> <td>array</td>
    </tr>
    <tr>
        <td>Map</td> <td>object</td>
    </tr>
</table>


<h3>Type Conversion of Parameter Value from JavaScript to Java</h3>

<table class="aphid-table">
    <tr>
        <th>JavaScript</th> <th>Java</th>
    </tr>
    <tr>
        <td>undefined</td> <td>null</td>
    </tr>
    <tr>
        <td>null</td> <td>null</td>
    </tr>
    <tr>
        <td>number</td> <td>corresponding primitive numeric type</td>
    </tr>
    <tr>
        <td>string</td> <td>String</td>
    </tr>
    <tr>
        <td>array</td> <td>List</td>
    </tr>
    <tr>
        <td>object except array</td> <td>Map</td>
    </tr>
</table>


<p>Strict type checking is performed during conversion, which throws a JavaScript exception if the types are mismatched.</p>

<h2>Integration with Google Analytics in Boilerplate-Android</h2>

<p>Let's illustrate how to integrate Google Analytics SDK into OpenAphid for Android. All source codes can be found in the <a href="https://github.com/openaphid/Boilerplate-Android">Boilerplate-Android</a> project.</p>

<p>After adding Google Analytics Android SDK into our project as described in its <a href="https://developers.google.com/analytics/devguides/collection/android/devguide#gettingStarted">official document</a>, we create a Java class <a href="https://github.com/openaphid/Boilerplate-Android/blob/master/src/org/openaphid/thirdparty/ga/GoogleAnalyticsBinding.java">GoogleAnalyticsBinding</a> to bridge JavaScript and Google Analytics SDK. <code>GoogleAnalyticsBinding</code> makes the exposed functions have identical signatures as its iOS version, which enables the same script file(<a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/game.bundle/main.js">main.js</a>) to run on both platforms.</p>

<p>```java
public class GoogleAnalyticsBinding {</p>

<pre><code>//...

@AphidJSFunction(isInUIThread = true, name = "setCustomVariableForScope")
public void setCustomVariable(int index, String name, String value, int scope) {
    GoogleAnalyticsTracker.getInstance()
            .setCustomVar(index, name, value, scope);
}

//...
</code></pre>

<p>}
```</p>

<p>Then we can inject an instance into JavaScript namespace <code>aphid.ext</code> as what we do in iOS version:</p>

<p>```java
glSurfaceView.getAphidRenderer().setScriptBinding(</p>

<pre><code>"gat", 
new GoogleAnalyticsBinding(), 
false   //place inside aphid.ext namespace
);
</code></pre>

<p>```</p>

<p>Now all Google Analytics APIs can be accessed by the same JavaScript functions inside <code>aphid.ext.gat</code> on both iOS and Android.</p>

<p>That's all for this tutorial. We're working on OpenAphid for Android v0.2, which implements <code>XMLHttpRequest</code> APIs as what we already have in iOS version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Calling Objective-C Methods from JavaScript in OpenAphid]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid/"/>
    <updated>2012-05-16T10:06:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid">OpenAphid</a> 0.2 was shipped with a new binding system which can bridge JavaScript functions to Objective-C methods on demand. It's useful for games to integrate analytics services, monetization solutions, and social services, etc. In this tutorial, we'll go through the binding system by demonstrating how to integrate <a href="https://developers.google.com/analytics/devguides/collection/ios/">Google Analytics iOS SDK</a> into OpenAphid.</p>

<!-- more -->


<h2>How to Access Objective-C Methods in JavaScript</h2>

<p>The <code>OABindingProtocol</code> protocol, defined in <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/OABindingProtocol.h">OABindingProtocol.h</a>, defines a method <code>bindSelectors:</code> that you can implement in your Objective-C classes to expose their methods to the JavaScript environment. To make a method valid for export, its return type and all argument types must be the supported types below:</p>

<h3>Type Conversion of Return Value from Objective-C to JavaScript</h3>

<table class="aphid-table">
    <tr>
        <th>Objective-C</th>
        <th>JavaScript</th>
    </tr>
    <tr>
        <td>void</td> <td>undefined</td>
    </tr>
    <tr>
        <td>nil or NSNull</td> <td>null</td>
    </tr>
    <tr>
        <td>primitive numeric types<br/>(int, float, double, etc)</td> <td>number</td>
    </tr>
    <tr>
        <td>NSNumber</td> <td>number</td>
    </tr>
    <tr>
        <td>NSString</td> <td>string</td>
    </tr>
    <tr>
        <td>NSArray</td> <td>array</td>
    </tr>
    <tr>
        <td>NSDictionary</td> <td>object</td>
    </tr>
</table>


<h3>Type Conversion of Argument Value from JavaScript to Objective-C</h3>

<table class="aphid-table">
    <tr>
        <th>JavaScript</th> <th>Objective-C</th>
    </tr>
    <tr>
        <td>undefined</td> <td>nil or NSNull</td>
    </tr>
    <tr>
        <td>null</td> <td>nil or NSNull</td>
    </tr>
    <tr>
        <td>number</td> <td>primitive number or NSNumber</td>
    </tr>
    <tr>
        <td>string</td> <td>NSString</td>
    </tr>
    <tr>
        <td>array</td> <td>NSArray</td>
    </tr>
    <tr>
        <td>object except array</td> <td>NSDictionary</td>
    </tr>
</table>


<p>For any method to export, it must be explicitly declared in the implementation of <code>bindSelectors:</code> in your Objective-C class. For example, the snippet below exports <code>[DatastoreBinding saveString:]</code> to JavaScript environment as <code>int saveString(string)</code>:</p>

<p>```objective-c</p>

<h1>import "OABindingProtocol"</h1>

<p>@interface DatastoreBinding : NSObject <OABindingProtocol>
@end</p>

<p>@implementation DatastoreBinding
- (BOOL) saveString:(NSString*)content
{
  [_myDatastore save:content];
}</p>

<h1>pragma OABindingProtocol</h1>

<ul>
<li>(void) bindSelectors:(OABindingMap*)bindingMap
{
  [bindingMap bindSelector:@selector(saveString:) forName:@"saveString"];
}
@end
```</li>
</ul>


<p>The binding object need be injected into JavaScript via <code>setScriptBinding:name:iOSOnly:</code> method of <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/OAGLViewController.h">OAGLViewController</a>:</p>

<p>```objective-c
- (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>//...
[self.viewController.glViewController setScriptBinding:[[[DatastoreBinding alloc] init] autorelease] 
                                                name:@"datastore" 
                                             iOSOnly:YES
</code></pre>

<p>   ];</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<p>OpenAphid injects an instance of <code>DatastoreBinding</code> as a JavaScript object of <code>[object DynamicBinding]</code> into JavaScript environment. And its name is <code>datastore</code>. The <code>iOSOnly</code> argument manages the namespace which contains the injected object. If it's <code>YES</code>, then the injected object can be accessed via <code>aphid.extios.datastore</code>; otherwise it can be accessed via <code>aphid.ext.datastore</code>.</p>

<blockquote><p>Notes: the <code>iOSOnly</code> argument is actually designed for future compliance when OpenAphid supports both iOS and Android.</p></blockquote>

<h2>Integration with Google Analytics in Boilerplate-iOS</h2>

<p>Let's see a more concrete example about integrating Google Analytics in <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a>.</p>

<p>After adding Google Analytics iOS SDK into the Xcode project by following its <a href="https://developers.google.com/analytics/devguides/collection/ios/devguide#gettingStarted">official instructions</a>. We create an Objective-C object to describe the binding in <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAGoogleAnalyticsBinding.h">OAGoogleAnalyticsBinding.h</a>:</p>

<p><code>objective-c
@interface OAGoogleAnalyticsBinding : NSObject &lt;OABindingProtocol&gt;
@end
</code></p>

<p>Then we add implementations of several methods in <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAGoogleAnalyticsBinding.m">OAGoogleAnalyticsBinding.m</a> that we want to invoke in JavaScript:</p>

<p>```objective-c
@implementation OAGoogleAnalyticsBinding
//...</p>

<ul>
<li><p>(void) startTrackerWithAccountID:(NSString*)accountID despatchPeriod:(int)period
{
  [[GANTracker sharedTracker] startTrackerWithAccountID:accountID dispatchPeriod:period delegate:nil];
}</p></li>
<li><p>(BOOL)trackPageview:(NSString *)pageURL
{
  return [[GANTracker sharedTracker] trackPageview:pageURL withError:NULL];
}</p></li>
</ul>


<p>//...
```</p>

<p>The binding of the methods should be declared in the <code>bindSelectors:</code> method:</p>

<p>```objective-c
- (void)bindSelectors:(OABindingMap *)bindingMap
{
[bindingMap bindSelector:@selector(startTrackerWithAccountID:despatchPeriod:)</p>

<pre><code>             forName:@"startTracker"];
</code></pre>

<p>//...</p>

<p>[bindingMap bindSelector:@selector(trackPageview:)</p>

<pre><code>             forName:@"trackPageView"];
</code></pre>

<p>//...
}
```</p>

<p>Then we can inject it into JavaScript as following code inside <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAAppDelegate.m">OAAppDelegate.m</a>:</p>

<p>```objective-c
- (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>//...

[self.viewController.glViewController setScriptBinding:[[OAGoogleAnalyticsBinding new] autorelease]  
                                                name:@"gat" 
                                             iOSOnly:NO];
//...
</code></pre>

<p>}</p>

<p>```</p>

<blockquote><p><strong> Updates at 07-09-2012: </strong> <code>iOSOnly</code> has been changed from <code>YES</code> to <code>NO</code> to match its Android version.</p></blockquote>

<p>Now we can use Google Analytics in JavaScript to track the user's behavior in games:</p>

<p><code>javascript
var gat = aphid.ext.gat; //Google Analytics is injected as aphid.ext.gat
gat.startTracker("UA-31741840-1", 10); //start a tracker
gat.trackPageView("main.js"); //track a page view
</code></p>

<blockquote><p><strong> Updates at 07-09-2012: </strong> Since <code>iOSOnly</code> has been set to <code>NO</code>, the JavaScript namespace for <code>gat</code> is switched to <code>aphid.ext</code> from <code>aphid.extios</code></p></blockquote>

<p>We're going to integrate more services into <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a>, and make it be a better starter kit for game development with OpenAphid.</p>

<p>If you have better ideas, please feel free to contact us via <code>openaphid@gmail.com</code> or raise an issue in our <a href="https://github.com/openaphid">github repositories</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Handling Touch Events in OpenAphid v0.1.1]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/06/tutorial-handling-touch-events-in-openaphid-v0-dot-1-1/"/>
    <updated>2012-05-06T21:54:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/06/tutorial-handling-touch-events-in-openaphid-v0-dot-1-1</id>
    <content type="html"><![CDATA[<p>We are glad to release OpenAphid v0.1.1, which adds multitouch support and fixes several issues about touch handling. The detailed change log is following:</p>

<!-- more -->


<ul>
<li>Supports multitouch events: adds <code>multipleTouchEnabled</code> attribute to <code>Director</code></li>
<li>Adds <code>userInteractionEnabled</code> attribute to Node</li>
<li>Fixes incorrect values of <code>event.touches</code> and <code>event.targetTouches</code> in <code>ontouchend</code> callback</li>
<li>Adds a new constructor function to Color: <code>new Color(color, [alpha])</code></li>
</ul>


<h2>Basics of Touch Event Handling</h2>

<p>Any instances of the <code>Node</code> class can be the <code>EventTarget</code> of touch events in OpenAphid. This is different from <a href="http://www.cocos2d-iphone.org/">cocos2d-iphone</a>, in which <code>CCLayer</code> is usually the target of touch event.</p>

<p>Several attributes affect how a node handles touch events: <code>multipleTouchEnabled</code> of the <code>Director</code> class; <code>userInteractionEnabled</code>, <code>visible</code>, <code>touchEnabled</code>, and <code>contentSize</code> of the <code>Node</code> class.</p>

<h2>Flow of Touch Event</h2>

<p>The flow of a touch event goes through 2 phases: hit-testing and event bubbling.</p>

<h3>Hit-Testing</h3>

<p>When a touch happens on the device screen, OpenAphid follows the routine below to locate its event target:</p>

<ol>
<li><p>Hit-testing is used to find the sub-node of the running scene that is under a touch. This method proceeds recursively on each node in the node hierarchy.</p></li>
<li><p>Hit-testing fails on a node and doesn't proceed on its children if either <code>userInteractionEnabled</code> or <code>visible</code> is <code>false</code>.</p></li>
<li><p>The testing fails on a node but proceeds on its children if its <code>touchEnabled</code> is <code>false</code></p></li>
<li><p>If the <code>contentSize</code> if a node is zero, hit-testing is delegated to its children nodes; otherwise it proceeds when the touch took place inside the rectangle area defined by the <code>contentSize</code>.</p></li>
<li><p>A node becomes the event target when it meets the following conditions: its <code>contentSize</code> is not zero and the touch location is inside it; hit-testing fails on any of its children but succeeds on it.</p></li>
</ol>


<h3>Event Bubbling</h3>

<p>Once the event target of a touch is found by hit-testing, a touch event object is passed to its callback functions, and bubbling up to its ancestors of which <code>touchEnabled</code> is <code>true</code>. <code>event.stopPropagation</code> can be used to stop bubbling.</p>

<h2>Interfaces of Touch Event</h2>

<p>The APIs of touch event handling in OpenAphid are implemented to follow the specification of <a href="http://www.w3.org/TR/touch-events/">W3C DOM Touch Event Version 1</a>. There are already lots of guides about handling touches in DOM, which can be used as references for OpenAphid too. We've updated the <a href="https://github.com/openaphid/Demos">Demos</a> of OpenAphid to include a <code>TouchTest</code> application, which demonstrates three scenarios of touch handling:</p>

<ul>
<li><p>Handling a single touch event to drag a sprite.</p></li>
<li><p>Handling multitouch events to move multiple sprites.</p></li>
<li><p>Detecting pinch gesture to zoom in/out a sprite.</p></li>
</ul>


<p>Please checkout the <a href="https://github.com/openaphid/Demos">Demos</a> project for more details. We're also going to implement gesture detection APIs in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Developer Mode of OpenAphid]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/02/develop-mode-of-openaphid/"/>
    <updated>2012-05-02T14:52:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/02/develop-mode-of-openaphid</id>
    <content type="html"><![CDATA[<p><code>Developer Mode</code> is a feature to speed up developing games with OpenAphid. The behavior of OpenAphid changes if the developer mode is turned on.</p>

<!-- more -->


<h2>How to Enable Developer Mode?</h2>

<p>Open your project with Xcode and locate the following lines in <code>OAAppDelegate.m</code>:</p>

<p>``` objective-c
[self.viewController.glViewController configBundleName:@"game.bundle"</p>

<pre><code>                                           baseURL:[NSURL URLWithString:@"http://129.158.217.36:18080"]
                                       developMode:YES];
</code></pre>

<p>```</p>

<ol>
<li><p>Setting the value of the <code>developMode</code> parameter to <code>YES</code> enables the developer mode of OpenAphid;</p></li>
<li><p>An HTTP server should be used to host the content inside the bundle folder specified by <code>configBundleName</code>. The value for the <code>baseURL</code> parameter should be set to the server address too. A ruby based tiny HTTP server is included in our boilerplate project, please refer to the <code>web_server.rb</code> and <code>start_dev_server.sh</code> files for more details;</p></li>
<li><p>The application should be built and re-deployed to devices with the new settings.</p></li>
</ol>


<p>And for the <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a> project, <code>UIApplicationExitsOnSuspend</code> is <code>YES</code> in its info.plist file; which makes the app terminate automatically when the Home button is pressed.</p>

<h2>Changes in Developer Mode</h2>

<p>The main benefit of using developer mode is that it makes the game development speedy like developing for web:</p>

<ul>
<li><p>JavaScript files are fetched from the HTTP server. If you want to see the result of your changes in the game script, you only need to re-open the app;</p></li>
<li><p>Graphics resources are fetched remotely too. For example, a texture can be created by using <code>new aphid.g2d.Texture2D("player.png")</code>; the <code>player.png</code> file is fetched via <code>http://129.158.217.36:18080/player.png</code> in developer mode. OpenAphid Runtime also prints a log about it as following:</p></li>
</ul>


<p><code>
INFO 05/02/12,13:41:32: (developer mode) loading data 'player.png' from remote: http://129.158.217.36:18080/player.png
</code></p>

<ul>
<li>Internal warning and error messages are displayed as on-screen notifications besides logging in device console. Warning messages are in blue background color and errors are in red color. The screenshot below shows a notification about a syntax error at line 17 in main.js:</li>
</ul>


<p><img src="/images/developer-mode-error-notification.png" title="Notification" alt="Error Notification" /></p>

<ul>
<li><p>Messages produced by <code>console.warn</code> and <code>console.error</code> are also displayed as notifications;</p></li>
<li><p>Write access to read-only attributes of OpenAphid objects throws exception in developer mode.</p></li>
</ul>


<p>With the developer mode of OpenAphid, the typical development process is as follows:</p>

<ol>
<li><p>Developer edits the JavaScript file with game logics and updates graphic files inside the bundle folder;</p></li>
<li><p>Presses the home button and enters the app again to see the result of the changes;</p></li>
<li><p>Following the on-screen notifications and console logs to diagnose mistakes in JavaScript files.</p></li>
</ol>


<p>Hope you like the developer mode of OpenAphid. We'll improve it constantly to make game development easier. Please feel free to contact us if you have any suggestions.</p>
]]></content>
  </entry>
  
</feed>
