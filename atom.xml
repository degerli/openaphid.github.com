<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OpenAphid]]></title>
  <link href="http://openaphid.github.com/atom.xml" rel="self"/>
  <link href="http://openaphid.github.com/"/>
  <updated>2012-05-16T16:20:46+08:00</updated>
  <id>http://openaphid.github.com/</id>
  <author>
    <name><![CDATA[Aphid Mobile]]></name>
    <email><![CDATA[openaphid@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial: Calling Objective-C Methods from JavaScript in OpenAphid]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid/"/>
    <updated>2012-05-16T10:06:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid">OpenAphid</a> 0.2 was shipped with a new binding system which can bridge JavaScript functions to Objective-C methods on demand. It&#8217;s useful for games to integrate analytics services, monetization solutions, and social services, etc. In this tutorial, we&#8217;ll go through the binding system by demonstrating how to integrate <a href="https://developers.google.com/analytics/devguides/collection/ios/">Google Analytics iOS SDK</a> into OpenAphid.</p>

<!-- more -->


<h2>How to Access Objective-C Methods in JavaScript</h2>

<p>The <code>OABindingProtocol</code> protocol, defined in <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/OABindingProtocol.h">OABindingProtocol.h</a>, defines a method <code>bindSelectors:</code> that you can implement in your Objective-C classes to expose their methods to the JavaScript environment. To make a method valid for export, its return type and all argument types must be the supported types below:</p>

<h3>Type Conversion of Return Value from Objective-C to JavaScript</h3>

<table class="aphid-table">
    <tr>
        <th>Objective-C</th>
        <th>JavaScript</th>
    </tr>
    <tr>
        <td>void</td> <td>undefined</td>
    </tr>
    <tr>
        <td>nil or NSNull</td> <td>null</td>
    </tr>
    <tr>
        <td>primitive numeric types<br/>(int, float, double, etc)</td> <td>number</td>
    </tr>
    <tr>
        <td>NSNumber</td> <td>number</td>
    </tr>
    <tr>
        <td>NSString</td> <td>string</td>
    </tr>
    <tr>
        <td>NSArray</td> <td>array</td>
    </tr>
    <tr>
        <td>NSDictionary</td> <td>object</td>
    </tr>
</table>


<h3>Type Conversion of Argument Value from JavaScript to Objective-C</h3>

<table class="aphid-table">
    <tr>
        <th>JavaScript</th> <th>Objective-C</th>
    </tr>
    <tr>
        <td>undefined</td> <td>nil or NSNull</td>
    </tr>
    <tr>
        <td>null</td> <td>nil or NSNull</td>
    </tr>
    <tr>
        <td>number</td> <td>primitive number or NSNumber</td>
    </tr>
    <tr>
        <td>string</td> <td>NSString</td>
    </tr>
    <tr>
        <td>array</td> <td>NSArray</td>
    </tr>
    <tr>
        <td>object except array</td> <td>NSDictionary</td>
    </tr>
</table>


<p>For any method to export, it must be explicitly declared in the implementation of <code>bindSelectors:</code> in your Objective-C class. For example, the snippet below exports <code>[DatastoreBinding saveString:]</code> to JavaScript environment as <code>int saveString(string)</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;OABindingProtocol&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">DatastoreBinding</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">OABindingProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">DatastoreBinding</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nl">saveString:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">content</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">_myDatastore</span> <span class="nl">save:</span><span class="n">content</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma OABindingProtocol</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">bindSelectors:</span><span class="p">(</span><span class="n">OABindingMap</span><span class="o">*</span><span class="p">)</span><span class="n">bindingMap</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">bindingMap</span> <span class="nl">bindSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">saveString:</span><span class="p">)</span> <span class="nl">forName:</span><span class="s">@&quot;saveString&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The binding object need be injected into JavaScript via <code>setScriptBinding:name:iOSOnly:</code> method of <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/OAGLViewController.h">OAGLViewController</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">viewController</span><span class="p">.</span><span class="n">glViewController</span> <span class="nl">setScriptBinding:</span><span class="p">[[[</span><span class="n">DatastoreBinding</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">]</span>
</span><span class='line'>                                                    <span class="nl">name:</span><span class="s">@&quot;datastore&quot;</span>
</span><span class='line'>                                                 <span class="nl">iOSOnly:</span><span class="n">YES</span>
</span><span class='line'>   <span class="p">];</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OpenAphid injects an instance of <code>DatastoreBinding</code> as a JavaScript object of <code>[object DynamicBinding]</code> into JavaScript environment. And its name is <code>datastore</code>. The <code>iOSOnly</code> argument manages the namespace which contains the injected object. If it&#8217;s <code>YES</code>, then the injected object can be accessed via <code>aphid.extios.datastore</code>; otherwise it can be accessed via <code>aphid.ext.datastore</code>.</p>

<blockquote><p>Notes: the <code>iOSOnly</code> argument is actually designed for future compliance when OpenAphid supports both iOS and Android.</p></blockquote>

<h2>Integration with Google Analytics in Boilerplate-iOS</h2>

<p>Let&#8217;s see a more concrete example about integrating Google Analytics in <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a>.</p>

<p>After adding Google Analytics iOS SDK into the Xcode project by following its <a href="https://developers.google.com/analytics/devguides/collection/ios/devguide#gettingStarted">official instructions</a>. We create an Objective-C object to describe the binding in <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAGoogleAnalyticsBinding.h">OAGoogleAnalyticsBinding.h</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">OAGoogleAnalyticsBinding</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">OABindingProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we add implementations of several methods in <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAGoogleAnalyticsBinding.m">OAGoogleAnalyticsBinding.m</a> that we want to invoke in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">OAGoogleAnalyticsBinding</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">startTrackerWithAccountID:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">accountID</span> <span class="nf">despatchPeriod:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">period</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">GANTracker</span> <span class="n">sharedTracker</span><span class="p">]</span> <span class="nl">startTrackerWithAccountID:</span><span class="n">accountID</span> <span class="nl">dispatchPeriod:</span><span class="n">period</span> <span class="nl">delegate:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">trackPageview:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">pageURL</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">GANTracker</span> <span class="n">sharedTracker</span><span class="p">]</span> <span class="nl">trackPageview:</span><span class="n">pageURL</span> <span class="nl">withError:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The binding of the methods should be declared in the <code>bindSelectors:</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bindSelectors:</span><span class="p">(</span><span class="n">OABindingMap</span> <span class="o">*</span><span class="p">)</span><span class="nv">bindingMap</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="n">bindingMap</span> <span class="nl">bindSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">startTrackerWithAccountID:despatchPeriod:</span><span class="p">)</span>
</span><span class='line'>                 <span class="nl">forName:</span><span class="s">@&quot;startTracker&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">bindingMap</span> <span class="nl">bindSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">trackPageview:</span><span class="p">)</span>
</span><span class='line'>                 <span class="nl">forName:</span><span class="s">@&quot;trackPageView&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can inject it into JavaScript as following code inside <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAAppDelegate.m">OAAppDelegate.m</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">viewController</span><span class="p">.</span><span class="n">glViewController</span> <span class="nl">setScriptBinding:</span><span class="p">[[</span><span class="n">OAGoogleAnalyticsBinding</span> <span class="n">new</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">]</span>
</span><span class='line'>                                                    <span class="nl">name:</span><span class="s">@&quot;gat&quot;</span>
</span><span class='line'>                                                 <span class="nl">iOSOnly:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can use Google Analytics in JavaScript to track the user&#8217;s behavior in games:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gat</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">extios</span><span class="p">.</span><span class="nx">gat</span><span class="p">;</span> <span class="c1">//Google Analytics is injected as aphid.extios.gat</span>
</span><span class='line'><span class="nx">gat</span><span class="p">.</span><span class="nx">startTracker</span><span class="p">(</span><span class="s2">&quot;UA-31741840-1&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">//start a tracker</span>
</span><span class='line'><span class="nx">gat</span><span class="p">.</span><span class="nx">trackPageView</span><span class="p">(</span><span class="s2">&quot;main.js&quot;</span><span class="p">);</span> <span class="c1">//track a page view</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re going to integrate more services into <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a>, and make it be a better starter kit for game development with OpenAphid.</p>

<p>If you have better ideas, please feel free to contact us via <code>openaphid@gmail.com</code> or raise an issue in our <a href="https://github.com/openaphid">github repositories</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid 0.2 is Available]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/15/openaphid-0-dot-2-available/"/>
    <updated>2012-05-15T22:28:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/15/openaphid-0-dot-2-available</id>
    <content type="html"><![CDATA[<p>AphidMobile is pleased to announce the availability of OpenAphid 0.2.</p>

<p>Highlights of the 0.2 release include:</p>

<!-- more -->


<ul>
<li>New binding system for exposing Objective-C methods to JavaScript</li>
<li>Hide <code>constructor</code> when enumerating attributs of an OpenAphid JavaScript object</li>
<li>Fix incorrect value of <code>node.onframeupdate</code> when it&#8217;s not set; should be <code>null</code> instead of an invalid empty value</li>
<li>Add a new target of <code>ObjCBindingTest</code> in <a href="https://github.com/openaphid/Demos">Demos</a></li>
<li>Support Google Analytics iOS SDK in <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a></li>
</ul>


<p>A new tutorial is coming in this week to introduce the new binding system for exposing Objective-C functions into JavaScript. Please stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Handling Touch Events in OpenAphid v0.1.1]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/06/tutorial-handling-touch-events-in-openaphid-v0-dot-1-1/"/>
    <updated>2012-05-06T21:54:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/06/tutorial-handling-touch-events-in-openaphid-v0-dot-1-1</id>
    <content type="html"><![CDATA[<p>We are glad to release OpenAphid v0.1.1, which adds multitouch support and fixes several issues about touch handling. The detailed change log is following:</p>

<!-- more -->


<ul>
<li>Supports multitouch events: adds <code>multipleTouchEnabled</code> attribute to <code>Director</code></li>
<li>Adds <code>userInteractionEnabled</code> attribute to Node</li>
<li>Fixes incorrect values of <code>event.touches</code> and <code>event.targetTouches</code> in <code>ontouchend</code> callback</li>
<li>Adds a new constructor function to Color: <code>new Color(color, [alpha])</code></li>
</ul>


<h2>Basics of Touch Event Handling</h2>

<p>Any instances of the <code>Node</code> class can be the <code>EventTarget</code> of touch events in OpenAphid. This is different from <a href="http://www.cocos2d-iphone.org/">cocos2d-iphone</a>, in which <code>CCLayer</code> is usually the target of touch event.</p>

<p>Several attributes affect how a node handles touch events: <code>multipleTouchEnabled</code> of the <code>Director</code> class; <code>userInteractionEnabled</code>, <code>visible</code>, <code>touchEnabled</code>, and <code>contentSize</code> of the <code>Node</code> class.</p>

<h2>Flow of Touch Event</h2>

<p>The flow of a touch event goes through 2 phases: hit-testing and event bubbling.</p>

<h3>Hit-Testing</h3>

<p>When a touch happens on the device screen, OpenAphid follows the routine below to locate its event target:</p>

<ol>
<li><p>Hit-testing is used to find the sub-node of the running scene that is under a touch. This method proceeds recursively on each node in the node hierarchy.</p></li>
<li><p>Hit-testing fails on a node and doesn&#8217;t proceed on its children if either <code>userInteractionEnabled</code> or <code>visible</code> is <code>false</code>.</p></li>
<li><p>The testing fails on a node but proceeds on its children if its <code>touchEnabled</code> is <code>false</code></p></li>
<li><p>If the <code>contentSize</code> if a node is zero, hit-testing is delegated to its children nodes; otherwise it proceeds when the touch took place inside the rectangle area defined by the <code>contentSize</code>.</p></li>
<li><p>A node becomes the event target when it meets the following conditions: its <code>contentSize</code> is not zero and the touch location is inside it; hit-testing fails on any of its children but succeeds on it.</p></li>
</ol>


<h3>Event Bubbling</h3>

<p>Once the event target of a touch is found by hit-testing, a touch event object is passed to its callback functions, and bubbling up to its ancestors of which <code>touchEnabled</code> is <code>true</code>. <code>event.stopPropagation</code> can be used to stop bubbling.</p>

<h2>Interfaces of Touch Event</h2>

<p>The APIs of touch event handling in OpenAphid are implemented to follow the specification of <a href="http://www.w3.org/TR/touch-events/">W3C DOM Touch Event Version 1</a>. There are already lots of guides about handling touches in DOM, which can be used as references for OpenAphid too. We&#8217;ve updated the <a href="https://github.com/openaphid/Demos">Demos</a> of OpenAphid to include a <code>TouchTest</code> application, which demonstrates three scenarios of touch handling:</p>

<ul>
<li><p>Handling a single touch event to drag a sprite.</p></li>
<li><p>Handling multitouch events to move multiple sprites.</p></li>
<li><p>Detecting pinch gesture to zoom in/out a sprite.</p></li>
</ul>


<p>Please checkout the <a href="https://github.com/openaphid/Demos">Demos</a> project for more details. We&#8217;re also going to implement gesture detection APIs in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Developer Mode of OpenAphid]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/02/develop-mode-of-openaphid/"/>
    <updated>2012-05-02T14:52:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/02/develop-mode-of-openaphid</id>
    <content type="html"><![CDATA[<p><code>Developer Mode</code> is a feature to speed up developing games with OpenAphid. The behavior of OpenAphid changes if the developer mode is turned on.</p>

<!-- more -->


<h2>How to Enable Developer Mode?</h2>

<p>Open your project with Xcode and locate the following lines in <code>OAAppDelegate.m</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">viewController</span><span class="p">.</span><span class="n">glViewController</span> <span class="nl">configBundleName:</span><span class="s">@&quot;game.bundle&quot;</span>
</span><span class='line'>                                               <span class="nl">baseURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://129.158.217.36:18080&quot;</span><span class="p">]</span>
</span><span class='line'>                                           <span class="nl">developMode:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Setting the value of the <code>developMode</code> parameter to <code>YES</code> enables the developer mode of OpenAphid;</p></li>
<li><p>An HTTP server should be used to host the content inside the bundle folder specified by <code>configBundleName</code>. The value for the <code>baseURL</code> parameter should be set to the server address too. A ruby based tiny HTTP server is included in our boilerplate project, please refer to the <code>web_server.rb</code> and <code>start_dev_server.sh</code> files for more details;</p></li>
<li><p>The application should be built and re-deployed to devices with the new settings.</p></li>
</ol>


<p>And for the <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a> project, <code>UIApplicationExitsOnSuspend</code> is <code>YES</code> in its info.plist file; which makes the app terminate automatically when the Home button is pressed.</p>

<h2>Changes in Developer Mode</h2>

<p>The main benefit of using developer mode is that it makes the game development speedy like developing for web:</p>

<ul>
<li><p>JavaScript files are fetched from the HTTP server. If you want to see the result of your changes in the game script, you only need to re-open the app;</p></li>
<li><p>Graphics resources are fetched remotely too. For example, a texture can be created by using <code>new aphid.g2d.Texture2D("player.png")</code>; the <code>player.png</code> file is fetched via <code>http://129.158.217.36:18080/player.png</code> in developer mode. OpenAphid Runtime also prints a log about it as following:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">INFO</span> <span class="mo">05</span><span class="o">/</span><span class="mo">02</span><span class="o">/</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="o">:</span><span class="mi">41</span><span class="o">:</span><span class="mi">32</span><span class="o">:</span> <span class="p">(</span><span class="n">developer</span> <span class="n">mode</span><span class="p">)</span> <span class="n">loading</span> <span class="n">data</span> <span class="err">&#39;</span><span class="n">player</span><span class="p">.</span><span class="n">png</span><span class="err">&#39;</span> <span class="n">from</span> <span class="nl">remote:</span> <span class="nl">http:</span><span class="c1">//129.158.217.36:18080/player.png</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Internal warning and error messages are displayed as on-screen notifications besides logging in device console. Warning messages are in blue background color and errors are in red color. The screenshot below shows a notification about a syntax error in a JavaScript file:</li>
</ul>


<p><img src="http://openaphid.github.com/images/developer-mode-error-notification.png" title="Notification" alt="Error Notification" /></p>

<ul>
<li><p>Messages produced by <code>console.warn</code> and <code>console.error</code> are also displayed as notifications;</p></li>
<li><p>Write access to read-only attributes of OpenAphid objects throws exception in developer mode.</p></li>
</ul>


<p>With the developer mode of OpenAphid, the typical development process is as follows:</p>

<ol>
<li><p>Developer edits the JavaScript file with game logics and updates graphic files inside the bundle folder;</p></li>
<li><p>Presses the home button and enters the app again to see the result of the changes;</p></li>
<li><p>Following the on-screen notifications and console logs to diagnose mistakes in JavaScript files.</p></li>
</ol>


<p>Hope you like the developer mode of OpenAphid. We&#8217;ll improve it constantly to make game development easier. Please feel free to contact us if you have any suggestions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid v0.1 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/04/29/openaphid-v0-dot-1-released/"/>
    <updated>2012-04-29T20:11:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/04/29/openaphid-v0-dot-1-released</id>
    <content type="html"><![CDATA[<p>We&#8217;re excited to release OpenAphid v0.1, which is the first public version of the project.</p>

<p>Three GitHub repositories have been created:</p>

<!-- more -->


<ul>
<li><p><code>Runtime</code>: <a href="https://github.com/openaphid/Runtime">https://github.com/openaphid/Runtime</a>. As the core runtime of OpenAphid, it&#8217;s an iOS static library project and is mainly written in C++. Besides porting the OpenGL ES rendering from <a href="http://www.cocos2d-iphone.org/">Cocos2d-iPhone</a>, it also manages the binding layer which exposes the 2D rendering as <a href="http://openaphid.github.com/api-doc/latest/index.html">JavaScript APIs</a>.</p></li>
<li><p><code>Demos</code>: <a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a>. This repository includes several demos of OpenAphid. <code>PortedDemos</code> contains four iOS applications which are ported from <a href="http://www.cocos2d-iphone.org/">Cocos2d-iPhone</a>: NodeTest, SpriteTest, EffectTest and AdvEffectTest. They demonstrate how to manipulate nodes, sprites and actions in JavaScript APIs. <code>TankBenchmarks</code> is the benchmark described in our <a href="http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a>. The implementation by using <a href="https://developer.mobage.com/">ngCore</a> is also presented for your reference. You can build and run them on your iOS devices to reproduce the benchmark results.</p></li>
<li><p><code>Boilerplate-iOS</code>: <a href="https://github.com/openaphid/Boilerplate-iOS">https://github.com/openaphid/Boilerplate-iOS</a>. It&#8217;s a template project for developing iOS games with OpenAphid. It&#8217;s a good start point if you want to play with the APIs of OpenAphid by yourself.</p></li>
</ul>


<p>The <a href="http://openaphid.github.com/api-doc/latest/index.html">JavaScript API references</a> of OpenAphid v0.1 is also available. It&#8217;s a bit rough right now. We promise that it&#8217;ll be improved in the future.</p>

<h2>Highlights of OpenAphid v0.1</h2>

<p>v0.1 is the start of OpenAphid. We admit that it&#8217;s not ready for real product yet, but we&#8217;d like to present some characteristics of the project here.</p>

<ul>
<li><p>OpenAphid APIs can be considered as the &#8220;DOM&#8221; APIs for 2D games on mobile devices. The internal binding layer is implemented in the similar approach as <a href="http://www.webkit.org/">WebKit</a> does for binding native objects to the JavaScript engine;</p></li>
<li><p>The memory occupied by native objects is managed automatically. Compared to some other script based game engines, OpenAphid doesn&#8217;t provide destroy API at script level for any native objects. Native objects that are created in JavaScript are managed by the JavaScript garbage collector as other pure JavaScript objects.</p></li>
<li><p>OpenAphid follows the standard specifications to implement some core features. Although the rendering system of OpenAphid is ported from Cocos2d-iPhone, which is not supported in browsers; the other APIs in OpenAphid are designed to follow W3C standards. For example, the <code>console</code> object in global scope is provided as it is in browsers; the <code>XMLHttpRequest</code> APIs are partially implemented in v0.1, and will be fully compatible to its W3C specification in a future release. And the touch event handling in OpenAphid is implemented as the same as in DOM, which is totally different from Cocos2d-iPhone.</p></li>
<li><p>OpenAphid is fast and efficient. The benchmark result in the <a href="http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a> has been updated by using v0.1, which is slightly faster. We also evaluated the memory usage of OpenAphid with the same benchmark (lower is better):</p></li>
</ul>


<p><img src="http://openaphid.github.com/images/tank_benchmark_mem_v0.1.jpg" title="Real memory" alt="Real memory usage of OpenAphid and ngcore" /></p>

<blockquote><p>The data are captured by using the Activity Monitor of Xcode Instruments. The memory usage of the benchmark on ngcore v1.6 is presented for reference only.</p></blockquote>

<h2>What&#8217;s Next for OpenAphid</h2>

<p>We&#8217;re working hard to improve OpenAphid. Most efforts are spent on the following tasks:</p>

<ul>
<li><p>Ports more features from Cocos2d-iPhone, like physics support, audio support, etc;</p></li>
<li><p>Supports Android OS;</p></li>
<li><p>Provides binding APIs for integrating 3rd-party services. The binding system in OpenAphid Runtime is designed for the performance requirement of OpenGL ES rendering, but it&#8217;s not suitable for general purpose. Another binding system is planned to bridge JavaScript codes and Objective-C(or Java on Android in the future releases) easily. The <code>Boilerplate-iOS</code> project will also be improved by integrating 3rd-party services, like analytics, in-app purchase, advertisement;</p></li>
<li><p>Implements more W3C standard APIs, includes making XMLHttpRequest fully compatible to specifications, adding FileSystem and WebSocket supports, etc.</p></li>
</ul>


<p>Please feel free to contact us with your questions and suggestions via <code>openaphid At gmail.com</code>. We’d appreciate it for your kind help.</p>

<h2>Special Thanks</h2>

<p>We&#8217;d like to express our appreciation to <a href="http://wannadobre.carbonmade.com/">Oana Dobre</a>, who designed the cute aphid graphics and allowed us to use them for free.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript and Cocos2D-iPhone: a sneak peek of OpenAphid]]></title>
    <link href="http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/"/>
    <updated>2012-02-20T23:26:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek</id>
    <content type="html"><![CDATA[<h2>What is OpenAphid?</h2>

<p><em>OpenAphid</em> is our secret OSS project to combine the power of JavaScript and <a href="http://www.cocos2d-iphone.org/">Cocos2d-iPhone</a> for native game development on mobile devices. It allows developers to write fast and native quality games in JavaScript language. The architecture of OpenAphid can be summarized as below:</p>

<!-- more -->


<p><img src="http://openaphid.github.com/images/architecture.jpg" title="Architecture of OpenAphid" alt="architecture" /></p>

<p>A set of Cocos2D-style JavaScript APIs are provided for composing scenes, applying actions on nodes, handling events, etc. The core runtime of OpenAphid is wrote in C++, which adopts the architecture of Cocos2d-iPhone. The JavaScript binding module bridges the C++ runtime and the JavaScript engine, which allows games to use native features in pure JavaScript.</p>

<p>We decided to implement the core of OpenAphid in C++ instead of reusing the Objective-C code base from Cocos2d-iPhone. The first reason is for portability. The current WIP version is for iOS only as Cocos2d-iPhone, but we&#8217;d like to support Android and other platforms after the iOS version is stable. The other consideration is for faster JavaScript binding. We want to reduce the performance overhead introduced by the script layer as small as possible.</p>

<h2>Why use JavaScript?</h2>

<p>JavaScript is one of the most popular programming languages in the world. OpenAphid enables developers using a familiar language for mobile game development, and it can also make the development cycle in a web speed.</p>

<p>At the development stage, developers can save the script and reload it on devices to see the changes instantly. No need to compile and re-deploy anymore.</p>

<p>OpenAphid is not the first one to bring JavaScript into native game development. There are several other frameworks which take the similar approaches. The most famous one is <a href="https://developer.mobage.com/">ngCore</a> from <a href="http://dena.jp/intl/">DeNA Co., Ltd</a>.</p>

<h2>Performance Benchmark Setup</h2>

<p>We adopt a benchmark program introduced in <a href="http://www.slideshare.net/devsumi/17a6smartphone-xplatform">a presentation of ngCore SDK</a>. The program is modified a bit and implemented in Cocos2d-iPhone, ngCore and OpenAphid. The benchmark is composed by several parts, let&#8217;s describe them using APIs from OpenAphid:</p>

<blockquote><p><strong> Updates at 2012-04-28: </strong> code snippets were updated according to the API changes in v0.1 release.</p></blockquote>

<h5>A background image(Size 1024x1024)</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">background</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Texture2D</span><span class="p">(</span><span class="s2">&quot;background.png&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nx">scene</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">background</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>A frame-by-frame animation(5 frames)</h4>

<p>The animation is made from a 320x64 size image, which is originally included in a sample project of ngCore SDK:</p>

<p><img src="http://openaphid.github.com/images/tank.png" title="Tank" alt="tank animation" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">texture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Texture2D</span><span class="p">(</span><span class="s2">&quot;tank.png&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">frames</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">imgSize</span> <span class="o">=</span> <span class="nx">texture</span><span class="p">.</span><span class="nx">contentSize</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">SpriteFrame</span><span class="p">(</span>
</span><span class='line'>                                      <span class="nx">texture</span><span class="p">,</span>
</span><span class='line'>                                      <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">Rect</span><span class="p">(</span>
</span><span class='line'>                                                          <span class="nx">imgSize</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="nx">i</span> <span class="o">/</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="nx">imgSize</span><span class="p">.</span><span class="nx">width</span> <span class="o">/</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="nx">imgSize</span><span class="p">.</span><span class="nx">height</span>
</span><span class='line'>                                                          <span class="p">)</span>
</span><span class='line'>                                      <span class="p">);</span>
</span><span class='line'>  <span class="nx">frames</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">frame</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Tank moves per frame inside the screen</h4>

<p>Dozens of small tanks are added to the scene. Each of them has a random initial position and changes it during each frame.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">tank</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">//declare a namespace</span>
</span><span class='line'><span class="nx">tank</span><span class="p">.</span><span class="nx">maxTankCount</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tank</span><span class="p">.</span><span class="nx">Tank</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">texture</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//fields</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="nx">texture</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//the movement velocity and direction</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">vx_</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="o">?</span> <span class="mf">0.1</span> <span class="o">:</span> <span class="o">-</span><span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">vy_</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="o">?</span> <span class="mf">0.1</span> <span class="o">:</span> <span class="o">-</span><span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">winSize</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">director</span><span class="p">.</span><span class="nx">winSize</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//a random initial position</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">Point</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">winSize</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">winSize</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//setup and register frame update listener</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">onframeupdate</span> <span class="o">=</span> <span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleFrameUpdate</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">scheduleUpdate</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tank</span><span class="p">.</span><span class="nx">Tank</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSprite</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">;};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tank</span><span class="p">.</span><span class="nx">Tank</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">handleFrameUpdate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">interval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">interval</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">vx_</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">interval</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">vy_</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">director</span><span class="p">.</span><span class="nx">winSize</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">vx_</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vx_</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">size</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">size</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">vx_</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vx_</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">vy_</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vy_</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="nx">size</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">size</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">vy_</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vy_</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="nx">p</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Apply animation and add tanks to the scene</h4>

<p>After applying the animation, the size of tank sprite is 64x64.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">animation</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Animation</span><span class="p">(</span><span class="nx">frames</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">repeatForever</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">animate</span><span class="p">(</span><span class="nx">animation</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tank</span><span class="p">.</span><span class="nx">maxTankCount</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newTank</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">tank</span><span class="p">.</span><span class="nx">Tank</span><span class="p">(</span><span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">texture</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">newTank</span><span class="p">.</span><span class="nx">getSprite</span><span class="p">().</span><span class="nx">runAction</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">copy</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">scene</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">newTank</span><span class="p">.</span><span class="nx">getSprite</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Run the scene</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">director</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">director</span><span class="p">;</span>
</span><span class='line'><span class="nx">director</span><span class="p">.</span><span class="nx">runScene</span><span class="p">(</span><span class="nx">scene</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>A screenshot of the benchmark running with 100 tanks:</p>

<p><img src="http://openaphid.github.com/images/screenshot_openaphid_100tanks.png" title="Screenshot" alt="screenshot of 100 tanks in OpenAphid" /></p>

<h2>Benchmark Environment</h2>

<p>The same benchmark is implemented in Cocos2d-iPhone, ngCore and OpenAphid. We tried to run it using the latest stable version of each:</p>

<ul>
<li><a href="http://www.cocos2d-iphone.org/download">Cocos2d-iPhone 1.0.1</a>. CCSpriteBatchNode is not used to make sure the benchmark share the same behavior in each framework. CC_DIRECTOR_FAST_FPS is also turned off for the same reason. CC_DIRECTOR_FPS_INTERVAL is set to 1.0f.</li>
<li><a href="https://developer.mobage.com/">ngCore 1.6-20120209</a>. The performance of ngCore has improved a lot in this latest release than v0.9 which is used in the <a href="http://www.slideshare.net/devsumi/17a6smartphone-xplatform">presentation</a>.</li>
<li>OpenAphid. An internal stable release is used to run the test.</li>
</ul>


<p>The benchmark is performed on an iPod Touch 3rd generation (32GB). The hardware specification can be found from its <a href="http://en.wikipedia.org/wiki/IPod_Touch">wikipedia page</a>.</p>

<h3>Benchmark Results</h3>

<p>The FPS data are recorded for running different number of tanks on each framework. The FPS of ngCore is not consistent, so we tracked both the high and low FPS data.</p>

<blockquote><p><strong> Updates at 2012-04-28: </strong> benchmark results are updated by using OpenAphid v0.1 release.</p></blockquote>

<p><img src="http://openaphid.github.com/images/tank_benchmark_fps_v0.1.jpg" title="Benchmark Results (Updated at 2012-04-28)" alt="performance benchmark" /></p>

<p>OpenAphid gives a pleasant result. It&#8217;s faster than ngCore and keeps 60 FPS when there are less than 200 tank sprites. The FPS is lower than Cocos2d-iPhone&#8217;s when adding more tanks, it&#8217;s acceptable as there are hundreds of native-to-JavaScript update callbacks to invoke during each frame. And we&#8217;ll keep working to improve its performance.</p>

<h2>When will OpenAphid be released?</h2>

<p>OpenAphid is still under development. We&#8217;re working hard to make the first public release available in the middle of April. All source codes will be public then. Please feel free to mail us with your questions and suggestions via <em>openaphid At gmail.com</em>. We&#8217;d appreciate it for your kind help.</p>
]]></content>
  </entry>
  
</feed>
